#include <SPI.h>
#include <MFRC522.h>
#include <Keyboard.h> // Include the Keyboard library for HID functionality

#define SS_PIN 10       // MFRC522 SDA pin
#define RST_PIN 9       // MFRC522 reset pin

MFRC522 rfid(SS_PIN, RST_PIN); // Instance of the MFRC522 class
MFRC522::MIFARE_Key key;

// Editable known NUID in hex format (authorized RFID tag)
byte knownNUID[4] = {0xFA, 0x1E, 0xFE, 0xB0}; // Replace with your tag's actual UID
bool isLoggedIn = false; // Track login status

void setup() { 
  Serial.begin(9600);
  SPI.begin();             // Start SPI bus
  rfid.PCD_Init();         // Initialize RFID reader
  Keyboard.begin();        // Initialize keyboard emulation

  for (byte i = 0; i < 6; i++) {
    key.keyByte[i] = 0xFF; // Set default key value
  }
  
  Serial.println(F("Setup complete. Ready to scan for RFID tag."));
}

void loop() {
  bool cardPresent = rfid.PICC_IsNewCardPresent() && rfid.PICC_ReadCardSerial(); // Check if RFID card is present

  if (cardPresent) {
    // If an RFID card is present, check if it matches the authorized NUID
    if (memcmp(rfid.uid.uidByte, knownNUID, 4) == 0 && !isLoggedIn) {
      logIn();
      isLoggedIn = true;
    }
  } else if (isLoggedIn) {
    // If no card is present and the user is logged in, log out
    logOut();
    isLoggedIn = false;
  }

  // Halt the RFID reader if a card was detected
  if (cardPresent) {
    rfid.PICC_HaltA();          // Stop reading the RFID card
    rfid.PCD_StopCrypto1();     // Stop any crypto operations
  }
}

void logIn() {
  // Emulate login sequence
  Keyboard.press(KEY_RETURN);   // Press Enter to focus password field
  Keyboard.releaseAll();
  delay(1000);                  // Wait for focus
  
  Keyboard.println("Password"); // Type password (replace with your actual password)
  delay(1000);                  // Wait before proceeding

  Keyboard.press(KEY_RETURN);   // Press Enter to submit password
  Keyboard.releaseAll();
  Serial.println(F("Login sequence executed."));
}

void logOut() {
  // Emulate logout sequence (Windows Key + L)
  Keyboard.press(KEY_LEFT_GUI); // Press Windows Key
  Keyboard.press('l');          // Press 'L' to lock the screen
  Keyboard.releaseAll();
  Serial.println(F("Logout sequence executed."));
}

void printTagDetails(MFRC522 &rfid) {
  Serial.print(F("PICC type: "));
  MFRC522::PICC_Type piccType = rfid.PICC_GetType(rfid.uid.sak);
  Serial.println(rfid.PICC_GetTypeName(piccType));
  
  Serial.println(F("The NUID tag is:"));
  Serial.print(F("In hex: "));
  printHex(rfid.uid.uidByte, rfid.uid.size);
  Serial.println();
  Serial.print(F("In dec: "));
  printDec(rfid.uid.uidByte, rfid.uid.size);
  Serial.println();
}

void printHex(byte *buffer, byte bufferSize) {
  for (byte i = 0; i < bufferSize; i++) {
    Serial.print(buffer[i] < 0x10 ? " 0" : " ");
    Serial.print(buffer[i], HEX);
  }
}

void printDec(byte *buffer, byte bufferSize) {
  for (byte i = 0; i < bufferSize; i++) {
    Serial.print(' ');
    Serial.print(buffer[i], DEC);
  }
}
